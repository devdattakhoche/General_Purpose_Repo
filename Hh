import sys

# Function to parse a line from the input file and generate SQL insert statement
def parse_line_to_sql(line):
    # Splitting line by ';' to get values
    values = line.strip().split(';')
    
    # Handling the case where values might be missing or empty
    # If fewer than 13 values provided, we need to insert NULL for the missing values
    if len(values) < 13:
        values.extend(['NULL'] * (13 - len(values)))
    
    # Formatting SQL insert statement
    sql = "INSERT INTO your_table_name (column1, column2, ..., column13) VALUES ({}, '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}');".format(
        values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12]
    )
    
    return sql

# Main function to read from input file and write generated SQL statements to output file
def main(input_file, output_file):
    try:
        with open(input_file, 'r') as f:
            with open(output_file, 'w') as out:
                for line in f:
                    sql = parse_line_to_sql(line)
                    out.write(sql + '\n')  # Writing SQL statement to output file
        
        print(f"SQL insert statements written to {output_file}")
        
    except IOError as e:
        print(f"Error opening or writing to files: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python script.py input_file output_file")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    
    main(input_file, output_file)
